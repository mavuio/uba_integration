{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","props","state","keyword","filteredData","data","uid","textkey","text","className","type","placeholder","aria-label","value","this","onChange","handleChange","bind","onClick","resetForm","map","row","idx","key","kw0","kw","toLowerCase","console","log","filter","item","search","event","setState","target","filterList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPA8LeA,G,kBA1Lb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,GACTC,aAAc,GACdC,KAAM,CACJ,CACEC,IAAK,EACLC,QAAS,KACTC,KAAM,WAER,CACEF,IAAK,EACLC,QAAS,KACTC,KAAM,cAER,CACEF,IAAK,EACLC,QAAS,KACTC,KAAM,aAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,UAER,CACEF,IAAK,EACLC,QAAS,KACTC,KAAM,gBAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,YAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,eAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,eAER,CACEF,IAAK,EACLC,QAAS,KACTC,KAAM,cAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,gBAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,UAER,CACEF,IAAK,EACLC,QAAS,KACTC,KAAM,mBAER,CACEF,IAAK,EACLC,QAAS,KACTC,KAAM,SAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,YAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,eAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,iBAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,uBAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,cAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,YAER,CACEF,IAAK,EACLC,QAAS,KACTC,KAAM,SAER,CACEF,IAAK,GACLC,QAAS,KACTC,KAAM,aA7GK,E,sEAoHjB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,oBACb,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,UACZC,aAAW,UACXC,MAAOC,KAAKZ,MAAMC,QAClBY,SAAUD,KAAKE,aAAaC,KAAKH,QAEnC,yBAAKL,UAAU,sBACb,4BACEA,UAAU,kBACVC,KAAK,SACLQ,QAASJ,KAAKK,UAAUF,KAAKH,OAH/B,WASHA,KAAKZ,MAAMC,QACZ,2BAAOM,UAAU,gBACf,+BACE,4BACE,mCACA,uCAGJ,+BACGK,KAAKZ,MAAME,aAAagB,KAAI,SAACC,EAAKC,GACjC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAId,SACT,4BAAKc,EAAIb,e,iCASdgB,GACT,IAAIpB,EAAeU,KAAKZ,MAAMG,KACxBoB,EAAKD,EAAIE,cAOf,OANAC,QAAQC,IAAI,YAAaxB,EAAcqB,GAC5B,KAAPA,IACFrB,EAAeA,EAAayB,QAAO,SAASC,GAC1C,OAAgE,KAAxDA,EAAKtB,KAAOsB,EAAKvB,SAASmB,cAAcK,OAAON,OAGpDrB,I,gCAEC4B,GACRlB,KAAKmB,SAAS,CAAE9B,QAAS,O,mCAEd6B,GACXlB,KAAKmB,SAAS,CACZ9B,QAAS6B,EAAME,OAAOrB,MACtBT,aAAcU,KAAKqB,WAAWH,EAAME,OAAOrB,W,0CAI7CC,KAAKmB,SAAS,CACZ7B,aAAcU,KAAKqB,WAAWrB,KAAKZ,MAAMC,e,GAtL7BiC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.da2410f9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: \"\",\n      filteredData: [],\n      data: [\n        {\n          uid: 1,\n          textkey: \"AB\",\n          text: \"Abfall \"\n        },\n        {\n          uid: 9,\n          textkey: \"AL\",\n          text: \"Altlasten \"\n        },\n        {\n          uid: 2,\n          textkey: \"AN\",\n          text: \"Analytik \"\n        },\n        {\n          uid: 10,\n          textkey: \"BO\",\n          text: \"Boden \"\n        },\n        {\n          uid: 6,\n          textkey: \"CH\",\n          text: \"Chemikalien \"\n        },\n        {\n          uid: 14,\n          textkey: \"EN\",\n          text: \"Energie \"\n        },\n        {\n          uid: 19,\n          textkey: \"GT\",\n          text: \"Gentechnik \"\n        },\n        {\n          uid: 24,\n          textkey: \"HE\",\n          text: \"Gesundheit \"\n        },\n        {\n          uid: 3,\n          textkey: \"AX\",\n          text: \"Industrie \"\n        },\n        {\n          uid: 18,\n          textkey: \"RA\",\n          text: \"Kernenergie \"\n        },\n        {\n          uid: 23,\n          textkey: \"KL\",\n          text: \"Klima \"\n        },\n        {\n          uid: 7,\n          textkey: \"LW\",\n          text: \"Landwirtschaft \"\n        },\n        {\n          uid: 4,\n          textkey: \"LU\",\n          text: \"Luft \"\n        },\n        {\n          uid: 17,\n          textkey: \"LR\",\n          text: \"L\\u00e4rm \"\n        },\n        {\n          uid: 11,\n          textkey: \"MO\",\n          text: \"Monitoring \"\n        },\n        {\n          uid: 21,\n          textkey: \"NP\",\n          text: \"Nationalpark \"\n        },\n        {\n          uid: 15,\n          textkey: \"NL\",\n          text: \"Natur / Landschaft \"\n        },\n        {\n          uid: 20,\n          textkey: \"SO\",\n          text: \"Sonstiges \"\n        },\n        {\n          uid: 16,\n          textkey: \"VE\",\n          text: \"Verkehr \"\n        },\n        {\n          uid: 8,\n          textkey: \"WD\",\n          text: \"Wald \"\n        },\n        {\n          uid: 12,\n          textkey: \"WA\",\n          text: \"Wasser \"\n        }\n      ]\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"keyword\"\n            aria-label=\"keyword\"\n            value={this.state.keyword}\n            onChange={this.handleChange.bind(this)}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"button\"\n              onClick={this.resetForm.bind(this)}\n            >\n              reset\n            </button>\n          </div>\n        </div>\n        {this.state.keyword}\n        <table className=\"styled_table\">\n          <thead>\n            <tr>\n              <th>key</th>\n              <th>title</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.filteredData.map((row, idx) => {\n              return (\n                <tr key={idx}>\n                  <td>{row.textkey}</td>\n                  <td>{row.text}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  filterList(kw0) {\n    var filteredData = this.state.data;\n    const kw = kw0.toLowerCase();\n    console.log(\"#log 8755\", filteredData, kw);\n    if (kw !== \"\") {\n      filteredData = filteredData.filter(function(item) {\n        return (item.text + item.textkey).toLowerCase().search(kw) !== -1;\n      });\n    }\n    return filteredData;\n  }\n  resetForm(event) {\n    this.setState({ keyword: \"\" });\n  }\n  handleChange(event) {\n    this.setState({\n      keyword: event.target.value,\n      filteredData: this.filterList(event.target.value)\n    });\n  }\n  componentDidMount() {\n    this.setState({\n      filteredData: this.filterList(this.state.keyword)\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}